import subprocess
import ConfigParser
import string
import shutil
import re

# New instance with 'bar' and 'baz' defaulting to 'Life' and 'hard' each
#config = ConfigParser.SafeConfigParser({'bar': 'Life', 'baz': 'hard'})
#config.read('example.cfg')

import os, fnmatch
from tvdb_api import Tvdb

def formatname(text=''):
    return string.replace(text, ' ', '*')

def generate_filepattern(showname, season='', episode=''):
    pattern = showname + '*' + season + '*' + episode + '*'
    return string.replace(pattern, ' ', '*')

def quote(text=''):
    '''Surrounds the text with double-qoutes. Needed for commandline operations in windows
    for paths which use spaces'''
    return '"' + text + '"'

def locate(pattern, root=os.curdir):
    '''Locate all files matching supplied filename pattern in and below
    supplied root directory.'''
    for path, dirs, files in os.walk(os.path.abspath(root)):
        for filename in fnmatch.filter(files, pattern):
            yield os.path.join(path, filename)
            
def unzip(filepattern, dir):
    '''Unzips all files matching the pattern within the directory.'''
    for file in locate(filepattern, dir):
        for zippedfile in fnmatch.filter([file], "*7z") or fnmatch.filter([file], "*zip") or fnmatch.filter([file], "*rar"):
            subprocess.Popen(quote('C:\\Program Files (x86)\\7-Zip\\7z.exe') + " e -y " + quote(zippedfile), shell=True)
            print "unzipped " + zippedfile
            
def move_files(filepattern, from_dir, to_dir, extensions = ['avi', 'mkv']):
    '''Moves all files matching the pattern with the (optional) extensions with the from_dir to the to_dir'''
    files = []
    for ext in extensions:
        for file in locate(filepattern + '.' + ext, from_dir):
            files.append(file)
        
    for file in files:
        try:
            shutil.move(file, to_dir)
            print "Moved " + file + " to " + to_dir
            #    os.remove(file)
            #print "Removed " + file
        except WindowsError, errormsg:
            print "Couldn't move " + file + " because %s" % errormsg

def rename_files(filepattern, name, dir, extensions = ['avi', 'mkv']):
    for file in locate(filepattern, dir):
        (path, filename) = os.path.split(file)
        #get season and episode number
        matches = re.match(r"[a-zA-Z\s\.\-_]+[seaonSEAON\s\.\-_\[\]]*(?P<season>\d?\d)[xXepisodEPISOD\s\.\-_\[\]]*(?P<episode>\d\d).*(?P<extension>\.[a-zA-Z]+)", filename)
        if matches:
            season = matches.group('season')
            episode = matches.group('episode')
            #append zero
            if len(season) == 1:
                season = '0' + season
            if len(episode) == 1:
                episode = '0' + episode
            extension = matches.group('extension')
            tvdb_instance = Tvdb(interactive=False, cache=True)
            name = tvdb_instance[name]['seriesname']
            episodename = tvdb_instance[name][int(season)][int(episode)]['episodename']
            #Remove illegal chars
            episodename = re.sub(r'["\*\/\\\|\<\>\?\:]', '', episodename)
            formatted_name = name.title() + ' - S' + season + 'E' + episode + ' - ' + episodename + extension
            path = path + '\\'
            #Only for avi and mkv files
            if extension in extensions or extension.replace('.', '') in extensions:
                try:
                    os.rename(path + filename, path + formatted_name)
                    print "Renamed " + path + formatted_name
                except WindowsError, errormsg:
                    print "Couldn't rename " + filename + " because %s" % errormsg
                    print "episodename: %s" % episodename

if __name__ == '__main__':
    names = ['Stargate Universe', 'Dexter', 'The Simpsons', 'How I Met Your Mother', 'The Big Bang Theory', 'House', 'Top Gear', 'Burnistoun', 'Breaking Bad', 'FlashForward', 'Futurama', 'The IT Crowd', 'Mythbusters']
    dir = "P:\\Downloads\\torrent"
    todir = "P:\\Film\TV-Serier\\"
    print 'Moving files from ' + dir + ' to ' + todir
    for name in names:
        print 'Looking for episodes of ' + name
        filepattern = generate_filepattern(name)
        unzip(filepattern, dir)
        rename_files(filepattern, name, dir)
        move_files(filepattern, dir, todir + name)
    
        #Rename all episodes!
        #Bit of a double loop, prevpath makes sure only one pass per directory is done
        #prevpath = ''
        #for file in locate(filepattern, todir):
            #(path, filename) = os.path.split(file)
            #if prevpath != path:
                #rename_files(filepattern, name, path)
                #prevpath = path

